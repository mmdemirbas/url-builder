buildscript {
    ext.kotlin_version = '1.2.41'
    repositories { jcenter() }
}

plugins {
    // Kotlin
    id "org.jetbrains.kotlin.jvm" version "1.2.41"

    // Jacoco - code coverage
    id "jacoco"

    // JMH - performance benchmark & kapt for annotation processing
    id "me.champeau.gradle.jmh" version "0.4.6"
    id "org.jetbrains.kotlin.kapt" version "1.2.41"
}

// todo: move gradle properties to build.gradle
task wrapper(type: Wrapper) {
    gradleVersion = '4.7'
}

group = 'com.mmdemirbas'
version = '1.0-SNAPSHOT'

repositories { jcenter() }

dependencies {
    // Kotlin
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // Junit5 for testing
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.2.0'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.2.0'
    testCompile 'org.junit.jupiter:junit-jupiter-params:5.2.0'

    // Spring framework for SpringTest
    testCompile 'org.springframework.boot:spring-boot-starter-web:1.3.8.RELEASE'
}

configurations.all {
    // exclude Junit4
    exclude group: 'junit'
}

// Kotlin configuration
compileKotlin { kotlinOptions { jvmTarget = "1.8" } }
compileTestKotlin { kotlinOptions { jvmTarget = "1.8" } }

// Test configuration
test {
    testLogging { events "passed", "skipped", "failed" }
    reports { html.enabled = true }
}

// Jacoco configuration
jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = false
    }
}
check.dependsOn jacocoTestReport

// JMH configuration
sourceSets {
    jmh {
        compileClasspath += sourceSets.test.runtimeClasspath
        runtimeClasspath += sourceSets.test.runtimeClasspath
    }
}
jmh {
    warmupIterations = 10
    warmupForks = 1
    warmup = '1s'
    iterations = 3
    timeOnIteration = '1s'
    timeout = '1s'
    threads = 3
    benchmarkMode = ['all']
}
